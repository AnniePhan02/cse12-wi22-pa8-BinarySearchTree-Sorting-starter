/**
 * TODO: Add your file header
 * Name:
 * ID:
 * Email:
 * Sources used: Put "None" if you did not have any external help
 * Some example of sources used would be Tutors, Zybooks, and Lecture Slides
 * 
 * 2-4 sentence file description here
 */

import java.util.ArrayList;

/**
 * TODO: Add class header
 */
public class MyBST<K extends Comparable<K>,V>{

    MyBSTNode<K,V> root = null;
    int size = 0;

    /**
     * TODO: add method headers for this and following methods
     * @return
     */
    public int size(){
        return size;
    }
    
    /**
     * TODO: Read the following comment and delete it.
     * To consistant with Javadoc format and avoid warning message that 
     * generated by style grader, make sure you do not have dash(-) or 
     * colon after @param or @return.
     * 
     * @param key
     * @param value
     * @return
     */
    public V insert(K key, V value){
        // TODO
        return null;
    }

    public V search(K key){
        // TODO
        return null;
    }

    public V remove(K key){ 
        // TODO
        return null;
    }
    
    public ArrayList<MyBSTNode<K, V>> inorder(){
        // TODO
        return null;
    }

    // TODO Fill in the class header
    static class MyBSTNode<K,V>{
        K key;
        V value;
        MyBSTNode<K,V> parent;
        MyBSTNode<K,V> left = null;
        MyBSTNode<K,V> right = null;

        /**
         * Creats a MyBSTNode<K,V> storing specified data
         * @param key the key the MyBSTNode<K,V> will
         * @param data the data the MyBSTNode<K,V> will store
         * @param parent the parent of this node
         */
        public MyBSTNode(K key, V value, MyBSTNode<K, V> parent){
            this.key = key;
            this.value = value;
            this.parent = parent; 
        }

        /**
         * Return the key stored in the the MyBSTNode<K,V>
         * @return the key stored in the MyBSTNode<K,V>
         */
        public K getKey(){
            return key;
        }

        /**
         * Return data stored in the MyBSTNode<K,V>
         * @return the data stored in the MyBSTNode<K,V>
         */
        public V getValue(){
            return value;
        }

        /**
         * Return the parent
         * @return the parent
         */
        public MyBSTNode<K,V> getParent(){
            return parent;
        }

        /**
         * Return the left child 
         * @return left child
         */
        public MyBSTNode<K,V> getLeft(){
            return left;
        }

        /**
         * Return the right child 
         * @return right child
         */
        public MyBSTNode<K,V> getRight(){
            return right;
        }

        /**
         * Set the key stored in the MyBSTNode<K,V>
         * @param newKey the key to be stored
         */
        public void setKey(K newKey){
            this.key = newKey;
        }

        /**
         * Set the data stored in the MyBSTNode<K,V>
         * @param newValue the data to be stored
         */
        public void setValue(V newValue){
            this.value = newValue;
        }

        /**
         * Set the parent
         * @param newParent the parent
         */
        public void setParent(MyBSTNode<K,V> newParent){
            this.parent = newParent;
        }

        /**
         * Set the left child
         * @param newLeft the new left child
         */
        public void setLeft(MyBSTNode<K,V> newLeft){
            this.left = newLeft;
        }

        /**
         * Set the right child
         * @param newRight the new right child
         */
        public void setRight(MyBSTNode<K,V> newRight){
            this.right = newRight;
        }

        /**
         * This method returns the in order successor of current node object.
         * It can be served as a helper method when implementing inorder().
         * @return  The successor of current node object
         */
        public MyBSTNode<K, V> successor(){

            // TODO: fill in the comment for this method to demonstrate your 
            // understanding of this method. The predecesor can be implemented in 
            // a similar way.
            if(this.getRight() != null){
                MyBSTNode<K,V> curr = this.getRight();
                while(curr.getLeft() != null){
                    curr = curr.getLeft();
                }
                return curr;
            }
            else{
                MyBSTNode<K,V> parent = this.getParent();
                MyBSTNode<K,V> curr = this;
                while(parent != null && curr == parent.getRight()){
                    curr = parent;
                    parent = parent.getParent();
                }
                return parent;
            }
        }

        public MyBSTNode<K, V> predecessor(){
            // TODO
            return null;
        }

        /** This method compares if two node objects are equal.
         * @param obj The target object that the currect object compares to.
         * @return Boolean value indicates if two node objects are equal
         */
        public boolean equals(Object obj){
            if (!(obj instanceof MyBSTNode))
                return false;

            MyBSTNode<K,V> comp = (MyBSTNode<K,V>)obj;
            
            return( (this.getKey() == null ? comp.getKey() == null : 
                this.getKey().equals(comp.getKey())) 
                && (this.getValue() == null ? comp.getValue() == null : 
                this.getValue().equals(comp.getValue())));
        }

        /**
         * This method gives a string represenatation of node object.
         * @return "Key:Value" that represents the node object
         */
        public String toString(){
            StringBuilder sb = new StringBuilder();
            sb.append("Key: ");
            sb.append(this.getKey() == null ? "null" : this.getKey());
            sb.append(" Value: ");
            sb.append(this.getValue() == null ? "null" : this.getValue());
            return sb.toString();
            
        }
    }

}